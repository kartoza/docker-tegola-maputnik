############################################################
#
#  A vector tiles project using gospatial/tegola and PostGIS
#
#          This Project (c) Tim Sutton, 2023
############################################################

version: "3.9"

#
# DOCKER IMAGES
#

# 13-3.1 is the first pg version with FORCE_SSL support
# needed to force clients to use SSL
x-postgres-image: &postgres-image kartoza/postgis:13-3.1
x-tegola-image: &tegola-image gospatial/tegola
x-maputnik-editor-image: &maputnik-editor-image maputnik/editor
#
# VOLUMES
#

# Generally we are using docker volumes for all volumes
# except conf files which are host mounted volumes out
# of our git repo checkout.
#

volumes:
    # postgis_data:

#
# SERVICES
#
services:

  db:
    image: *postgres-image
    # Allocate more then the default 64mb to postgresql
    shm_size: 10g
    volumes:
      # Persistent storage of the database cluster 
      # :z needed on systems like fedora using selinux
      # when using host mounted volumes
      - ./postgis_data:/var/lib/postgresql:z
    env_file: .env
    environment:
      # You can define multiple databases by providing a comma
      # separated list here.
      # gis - for general purpose gis projects
      # mergin-server - for mergin server flask app
      # mergin - for mergin-db-sync
      - POSTGRES_DB=gis
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      # Read the notes at
      # https://github.com/kartoza/docker-postgis#postgres-ssl-setup
      # Certificate from letsencrypt doesn't currently work
      #- SSL_CERT_FILE=/etc/letsencrypt/live/${DOMAIN}/cert.pems
      #- SSL_KEY_FILE=/etc/letsencrypt/live/${DOMAIN}/privkey.pem
      #- SSL_CA_FILE=/your/own/ssl_ca_file.pem
      # Force clients to connect with SSL - will add hostssl
      # instead of host to lines in pg_hba.conf
      - FORCE_SSL=TRUE
      # When connecting using your client, set SSL mode to 'Require'
      # If you want force using a certificate, use PASSWORD_AUTHENTICATION=cert
      # But then you also need to deploy certificates (again see the docs above)
      - ALLOW_IP_RANGE=0.0.0.0/0
      - PASSWORD_AUTHENTICATION=scram-sha-256
      # You can pass as many extensions as you need.
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      # Some extensions need to be registered in the postgresql.conf as
      # shared_preload_libraries. pg_cron should always be added because the
      # extension is installed with the image.
      - SHARED_PRELOAD_LIBRARIES=pg_cron
      - DEFAULT_ENCODING="UTF8"
      - DEFAULT_COLLATION="en_US.UTF-8"
      - DEFAULT_CTYPE="en_US.UTF-8"
      - POSTGRES_TEMPLATE_EXTENSIONS=true

    networks:
      - vector-tiles
    ports:
      - ${POSTGRES_PUBLIC_PORT}:${POSTGRES_PRIVATE_PORT}
    restart: unless-stopped
    healthcheck:
      test: "exit 0"
    logging:
      driver: json-file
      options:
        max-size: 200m
        max-file: '10'

  tegola:
    image: *tegola-image
    entrypoint: /opt/tegola
    command: serve --config /config/tegola.conf
    volumes:
      # :z needed on systems like fedora using selinux
      # when using host mounted volumes
      - ./conf/tegola_conf:/config:z
      - ./tiles:/tmp/tegola:z
    depends_on:
      - db
    ports:
      - 9090:9090
    networks:
      - vector-tiles
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=gis
      - POSTGRES_PORT=${POSTGRES_PRIVATE_PORT}
      - POSTGRES_HOST=db
      - SSL_MODE=require
      - TEGOLA_PORT=9090
      - TEGOLA_SQL_DEBUG=EXECUTE_SQL #LAYER_SQL  or EXECUTE_SQL
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 200m
        max-file: '10'

  tegola-seed:
    image: *tegola-image
    entrypoint: /opt/tegola
    command: cache seed --min-zoom 0 --max-zoom 4 --overwrite --concurrency 16 --config /config/tegola.conf
    volumes:
      # :z needed on systems like fedora using selinux
      # when using host mounted volumes
      - ./conf/tegola_conf:/config:z
      - ./tiles:/tmp/tegola:z
    depends_on:
      - db
    networks:
      - vector-tiles
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=gis
      - POSTGRES_PORT=${POSTGRES_PRIVATE_PORT}
      - POSTGRES_HOST=db
      - SSL_MODE=require
      - TEGOLA_PORT=9999 # Anything different to the main tegola service
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 200m
        max-file: '10'

  tegola-purge:
    image: *tegola-image
    entrypoint: /opt/tegola
    command: cache purge --min-zoom 0 --max-zoom 24 --overwrite --concurrency 16 --config /config/tegola.conf
    volumes:
      # :z needed on systems like fedora using selinux
      # when using host mounted volumes
      - ./conf/tegola_conf:/config:z
      - ./tiles:/tmp/tegola:z
    depends_on:
      - db
    networks:
      - vector-tiles
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASSWORD}
      - POSTGRES_DBNAME=gis
      - POSTGRES_PORT=${POSTGRES_PRIVATE_PORT}
      - POSTGRES_HOST=db
      - SSL_MODE=require
      - TEGOLA_PORT=9999 # Anything different to the main tegola service
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 200m
        max-file: '10'

  maputnik-editor:
    image: *maputnik-editor-image
    depends_on:
      - tegola
    ports:
      - 8888:8888
    networks:
      - vector-tiles
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: 200m
        max-file: '10'


networks:
  vector-tiles:
